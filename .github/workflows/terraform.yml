name: Terraform Azure Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: 1.0.0
  TERRAFORM_DIR: environments/dev

permissions:
  id-token: write  # Required for requesting JWT for OIDC
  contents: read   # Required for checking out the repository

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL

    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: 📄 Inject SSH Key into terraform.tfvars
      run: |
        cd ${{ env.TERRAFORM_DIR }}
        if [ -f terraform.tfvars ]; then
          echo "Updating ssh_public_key in terraform.tfvars"
          sed -i "s|^ssh_public_key *=.*|ssh_public_key = \"${{ secrets.SSH_PUBLIC_KEY }}\"|" terraform.tfvars
        else
          echo "Creating terraform.tfvars with ssh_public_key"
          echo "ssh_public_key = \"${{ secrets.SSH_PUBLIC_KEY }}\"" > terraform.tfvars
        fi

    - name: 🚀 Terraform Init
      run: terraform init
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: ✅ Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: 📐 Terraform Plan
      if: inputs.action == 'plan'
      run: terraform plan -var-file="terraform.tfvars"
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: 📐 Terraform Plan for Apply
      if: inputs.action == 'apply'
      id: plan-apply
      run: |
        terraform plan -out=tfplan -var-file="terraform.tfvars"
        echo "PLAN_OUTPUT<<EOF" >> $GITHUB_OUTPUT
        terraform show -no-color tfplan >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: 📝 Show Apply Plan Output
      if: inputs.action == 'apply'
      run: echo "${{ steps.plan-apply.outputs.PLAN_OUTPUT }}"

    - name: 🚀 Terraform Apply
      if: inputs.action == 'apply'
      run: terraform apply -auto-approve tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: 📐 Terraform Plan for Destroy
      if: inputs.action == 'destroy'
      id: plan-destroy
      run: |
        terraform plan -destroy -out=destroyplan -var-file="terraform.tfvars"
        echo "DESTROY_PLAN_OUTPUT<<EOF" >> $GITHUB_OUTPUT
        terraform show -no-color destroyplan >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: 📝 Show Destroy Plan Output
      if: inputs.action == 'destroy'
      run: echo "${{ steps.plan-destroy.outputs.DESTROY_PLAN_OUTPUT }}"

    - name: 🧨 Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform apply -auto-approve destroyplan
      working-directory: ${{ env.TERRAFORM_DIR }}